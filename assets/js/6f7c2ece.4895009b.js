"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4850],{4983:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>u});var r=n(4848),a=n(8453);const s={slug:"terraform-ternary-error",title:"Bypassing Terraform error: \u201cThe true and false result expressions must have consistent types\u201d",authors:"manu",tags:["infra","terraform","workarounds","devops"]},o=void 0,i={permalink:"/blog/tech/terraform-ternary-error",source:"@site/tech/2023-03-18-terraform-ternary-errors/index.md",title:"Bypassing Terraform error: \u201cThe true and false result expressions must have consistent types\u201d",description:"Have you ever came across this Terraform error \u2014 when you intentionally want your ternary to output different types?",date:"2023-03-18T00:00:00.000Z",tags:[{label:"infra",permalink:"/blog/tech/tags/infra"},{label:"terraform",permalink:"/blog/tech/tags/terraform"},{label:"workarounds",permalink:"/blog/tech/tags/workarounds"},{label:"devops",permalink:"/blog/tech/tags/devops"}],readingTime:1.91,hasTruncateMarker:!0,authors:[{name:"Manu Magalh\xe3es",title:"DevSecOps Engineer",url:"https://github.com/magmanu",imageURL:"https://github.com/magmanu.png",key:"manu"}],frontMatter:{slug:"terraform-ternary-error",title:"Bypassing Terraform error: \u201cThe true and false result expressions must have consistent types\u201d",authors:"manu",tags:["infra","terraform","workarounds","devops"]},unlisted:!1,prevItem:{title:"Generating Dynamic JSON in Terraform",permalink:"/blog/tech/dynamic-json-in-terraform"},nextItem:{title:"How to Migrate CodeCommit to GitHub \u2014 and Keep your Amplify Pipeline",permalink:"/blog/tech/migrate-codecommit-to-github"}},l={authorsImageUrls:[void 0]},u=[{value:"Simple example",id:"simple-example",level:2},{value:"Wait, what&#39;s just happened?",id:"wait-whats-just-happened",level:3},{value:"Less simple example",id:"less-simple-example",level:2}];function c(e){const t={blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"Have you ever came across this Terraform error \u2014 when you intentionally want your ternary to output different types?"}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsx)(t.p,{children:"The true and false result expressions must have consistent types"}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"To bypass this Terraform limitation, check the tip below. I'll follow it with two examples to clarify the usage:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-hcl",children:"attribute = [\n    <desired output if true>, \n    <desired output if false>\n    ][<condition> ? 0 : 1]\n"})}),"\n",(0,r.jsx)(t.h2,{id:"simple-example",children:"Simple example"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-hcl",children:'locals {\n    dynamic_value = [\n      {"region": "${var.region}"}, \n      "unavailable"\n      ][var.region == "eu-west-1" ? 0 : 1 ]\n}\n'})}),"\n",(0,r.jsxs)(t.p,{children:["Here, ",(0,r.jsx)(t.code,{children:"local.dynamic_value"})," will return an object if the AWS region is Ireland, or the string ",(0,r.jsx)(t.code,{children:'"unavailable"'})," for any other region."]}),"\n",(0,r.jsx)(t.h3,{id:"wait-whats-just-happened",children:"Wait, what's just happened?"}),"\n",(0,r.jsx)(t.p,{children:"Instead of using the ternary in the traditional way, we defined a tuple (aka, a list with mixed types), and used the ternary to return the index for the output we really want. Thanks mariux for the trick."}),"\n",(0,r.jsx)(t.h2,{id:"less-simple-example",children:"Less simple example"}),"\n",(0,r.jsx)(t.p,{children:"You can also inject dynamic outputs if needs be. I'm not saying this is Terraform best practice, or that it will be pretty. But sometimes a woman has to do what she has to do."}),"\n",(0,r.jsxs)(t.p,{children:["In my case, I was trying to abstract a Step Function ",(0,r.jsx)(t.code,{children:"Choice"}),". The ternary logic I needed was: if the object contains only one key, return a certain JSON structure. If the object contains multiple keys, return a different JSON structure.\nAnd this is how my condition panned out:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-hcl",children:'# There is a reason why this variable is a list\n# but that is beside the point now\n\nvariable "ssm_params" {\n    description = "Parameter required by SSM Documents to enable KMS key rotation"\n    default     = [{"KeyId": "States.Array($.KeyId)",\n                    "AutomationAssumeRole": "States.Array($.AutomationAssumeRole)"}]\n}\n\nlocals {\n  choices = [for item in var.ssm_params: [\n    # desired output if true\n    merge(flatten([\n      for key, value in item: {\n        "IsPresent": true,\n        "Next": "SSM-${key}",\n        "Variable": "$.${key}"\n      }\n    ])...),\n    # desired output if false\n    merge([\n      # Case: Choice step has multiple conditions (AND) \n      { "And" : [\n          for key, value in item: \n            {\n              "IsPresent": true,\n              "Variable": "$.${key}"\n            }\n        ],\n      "Next": "SSM-${join("", sort([keys(item)]...))}"\n      }\n    ]...)\n    ][\n      # condition\n      length(flatten([keys(item)])) == 1 ? 0 : 1\n      ]\n  ]\n}\n'})}),"\n",(0,r.jsxs)(t.p,{children:["Don't ask me how my laptop haven\u2019t gone through the window. But there you have it \u2014 enjoy your newfound freedom ",":P"]})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>i});var r=n(6540);const a={},s=r.createContext(a);function o(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);