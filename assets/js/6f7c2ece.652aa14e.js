"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3878],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>y});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),u=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=u(r),h=a,y=m["".concat(l,".").concat(h)]||m[h]||c[h]||o;return r?n.createElement(y,i(i({ref:t},p),{},{components:r})):n.createElement(y,i({ref:t},p))}));function y(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:a,i[1]=s;for(var u=2;u<o;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},6865:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var n=r(7462),a=(r(7294),r(3905));const o={slug:"terraform-ternary-error",title:"Bypassing Terraform error: \u201cThe true and false result expressions must have consistent types\u201d",authors:"manu",tags:["infra","terraform","workarounds","devops"]},i=void 0,s={permalink:"/blog/tech/terraform-ternary-error",source:"@site/tech/2023-03-18-terraform-ternary-errors/index.md",title:"Bypassing Terraform error: \u201cThe true and false result expressions must have consistent types\u201d",description:"Have you ever came across this Terraform error \u2014 when you intentionally want your ternary to output different types?",date:"2023-03-18T00:00:00.000Z",formattedDate:"March 18, 2023",tags:[{label:"infra",permalink:"/blog/tech/tags/infra"},{label:"terraform",permalink:"/blog/tech/tags/terraform"},{label:"workarounds",permalink:"/blog/tech/tags/workarounds"},{label:"devops",permalink:"/blog/tech/tags/devops"}],readingTime:1.88,hasTruncateMarker:!0,authors:[{name:"Manu Magalh\xe3es",title:"DevSecOps Engineer",url:"https://github.com/magmanu",imageURL:"https://github.com/magmanu.png",key:"manu"}],frontMatter:{slug:"terraform-ternary-error",title:"Bypassing Terraform error: \u201cThe true and false result expressions must have consistent types\u201d",authors:"manu",tags:["infra","terraform","workarounds","devops"]},prevItem:{title:"Generating Dynamic JSON in Terraform",permalink:"/blog/tech/dynamic-json-in-terraform"},nextItem:{title:"How to Migrate CodeCommit to GitHub \u2014 and Keep your Amplify Pipeline",permalink:"/blog/tech/migrate-codecommit-to-github"}},l={authorsImageUrls:[void 0]},u=[{value:"Simple example",id:"simple-example",level:2},{value:"Wait, what&#39;s just happened?",id:"wait-whats-just-happened",level:3},{value:"Less simple example",id:"less-simple-example",level:2}],p={toc:u},m="wrapper";function c(e){let{components:t,...r}=e;return(0,a.kt)(m,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Have you ever came across this Terraform error \u2014 when you intentionally want your ternary to output different types?"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"The true and false result expressions must have consistent types")),(0,a.kt)("p",null,"To bypass this Terraform limitation, check the tip below. I'll follow it with two examples to clarify the usage:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-terraform"},"attribute = [\n    <desired output if true>, \n    <desired output if false>\n    ][<condition> ? 0 : 1]\n")),(0,a.kt)("h2",{id:"simple-example"},"Simple example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-hcl"},'locals {\n    dynamic_value = [\n      {"region": "${var.region}"}, \n      "unavailable"\n      ][var.region == "eu-west-1" ? 0 : 1 ]\n}\n')),(0,a.kt)("p",null,"Here, ",(0,a.kt)("inlineCode",{parentName:"p"},"local.dynamic_value")," will return an object if the AWS region is Ireland, or the string ",(0,a.kt)("inlineCode",{parentName:"p"},'"unavailable"')," for any other region."),(0,a.kt)("h3",{id:"wait-whats-just-happened"},"Wait, what's just happened?"),(0,a.kt)("p",null,"Instead of using the ternary in the traditional way, we defined a tuple (aka, a list with mixed types), and used the ternary to return the index for the output we really want. Thanks mariux for the trick."),(0,a.kt)("h2",{id:"less-simple-example"},"Less simple example"),(0,a.kt)("p",null,"You can also inject dynamic outputs if needs be. I'm not saying this is Terraform best practice, or that it will be pretty. But sometimes a woman has to do what she has to do."),(0,a.kt)("p",null,"In my case, I was trying to abstract a Step Function ",(0,a.kt)("inlineCode",{parentName:"p"},"Choice"),". The ternary logic I needed was: if the object contains only one key, return a certain JSON structure. If the object contains multiple keys, return a different JSON structure.\nAnd this is how my condition panned out:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-hcl"},'# There is a reason why this variable is a list\n# but that is beside the point now\n\nvariable "ssm_params" {\n    description = "Parameter required by SSM Documents to enable KMS key rotation"\n    default     = [{"KeyId": "States.Array($.KeyId)",\n                    "AutomationAssumeRole": "States.Array($.AutomationAssumeRole)"}]\n}\n\nlocals {\n  choices = [for item in var.ssm_params: [\n    merge(flatten([\n      # Case: Choice step has single condition (isTrue)\n      for key, value in item: {\n        "IsPresent": true,\n        "Next": "SSM-${key}",\n        "Variable": "$.${key}"\n      }\n    ])...), \n    merge([\n      # Case: Choice step has multiple conditions (AND) \n      { "And" : [\n          for key, value in item: \n            {\n              "IsPresent": true,\n              "Variable": "$.${key}"\n            }\n        ],\n      "Next": "SSM-${join("", sort([keys(item)]...))}"\n      }\n    ]...)\n    ][length(flatten([keys(item)])) == 1 ? 0 : 1]\n]\n')),(0,a.kt)("p",null,"`\nDon't ask me how my laptop haven\u2019t gone through the window. But there you have it \u2014 enjoy your newfound freedom :P"))}c.isMDXComponent=!0}}]);