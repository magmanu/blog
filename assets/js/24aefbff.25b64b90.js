"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4879],{8406:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>r,toc:()=>c});var a=n(4848),i=n(8453);const s={slug:"github-actions-data-flow",title:"GitHub Actions: Data Flow & Data Persistence",authors:"manu",tags:["github actions","ci/cd","pipeline","env","outputs","artefacts","cache"]},o=void 0,r={permalink:"/blog/tech/github-actions-data-flow",source:"@site/tech/2023-10-31-github-actions-data-flow/index.md",title:"GitHub Actions: Data Flow & Data Persistence",description:"In Github Actions, by default, data is not inherently persistent or available to the whole pipeline. Every step has is its own process, every job has its own runner. By default, whatever data emerges in a job, ends with it.",date:"2023-10-31T00:00:00.000Z",tags:[{label:"github actions",permalink:"/blog/tech/tags/github-actions"},{label:"ci/cd",permalink:"/blog/tech/tags/ci-cd"},{label:"pipeline",permalink:"/blog/tech/tags/pipeline"},{label:"env",permalink:"/blog/tech/tags/env"},{label:"outputs",permalink:"/blog/tech/tags/outputs"},{label:"artefacts",permalink:"/blog/tech/tags/artefacts"},{label:"cache",permalink:"/blog/tech/tags/cache"}],readingTime:9.54,hasTruncateMarker:!0,authors:[{name:"Manu Magalh\xe3es",title:"DevSecOps Engineer",url:"https://github.com/magmanu",imageURL:"https://github.com/magmanu.png",key:"manu"}],frontMatter:{slug:"github-actions-data-flow",title:"GitHub Actions: Data Flow & Data Persistence",authors:"manu",tags:["github actions","ci/cd","pipeline","env","outputs","artefacts","cache"]},unlisted:!1,prevItem:{title:"An Ultimate Guide to Matrices in GitHub Actions, from Basic to Advanced",permalink:"/blog/tech/matrices-github-actions"},nextItem:{title:"Generating Dynamic JSON in Terraform",permalink:"/blog/tech/dynamic-json-in-terraform"}},l={authorsImageUrls:[void 0]},c=[{value:"Using <code>env</code>",id:"using-env",level:2},{value:"Debugging tip",id:"debugging-tip",level:4},{value:"Using <code>outputs</code>",id:"using-outputs",level:2},{value:"Using artefacts",id:"using-artefacts",level:2},{value:"Uploading artefacts",id:"uploading-artefacts",level:3},{value:"Downloading artefacts",id:"downloading-artefacts",level:3},{value:"Deleting artefacts",id:"deleting-artefacts",level:3},{value:"Using cache",id:"using-cache",level:2},{value:"Setting the cache",id:"setting-the-cache",level:3},{value:"Retrieving the cache",id:"retrieving-the-cache",level:3},{value:"Updating the cache",id:"updating-the-cache",level:3},{value:"Last notes about caching",id:"last-notes-about-caching",level:3}];function h(e){const t={a:"a",admonition:"admonition",br:"br",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components},{Details:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.p,{children:"In Github Actions, by default, data is not inherently persistent or available to the whole pipeline. Every step has is its own process, every job has its own runner. By default, whatever data emerges in a job, ends with it."}),"\n",(0,a.jsx)(t.p,{children:"How do we pass data from one process to the other, or save it for the next process?"}),"\n",(0,a.jsx)(t.p,{children:"A short sweet answer:"}),"\n",(0,a.jsxs)(t.table,{children:[(0,a.jsx)(t.thead,{children:(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.th,{children:"Strategy"}),(0,a.jsx)(t.th,{children:"Data"}),(0,a.jsx)(t.th,{children:"Scope"}),(0,a.jsx)(t.th,{children:"Persistence"}),(0,a.jsx)(t.th,{children:"Explanation"}),(0,a.jsx)(t.th,{children:"Example"})]})}),(0,a.jsxs)(t.tbody,{children:[(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"env"})}),(0,a.jsx)(t.td,{children:"Values"}),(0,a.jsx)(t.td,{children:"Job (internal)"}),(0,a.jsx)(t.td,{children:"Ephemeral"}),(0,a.jsxs)(t.td,{children:["Propagates ",(0,a.jsx)(t.em,{children:"data"})," ",(0,a.jsx)("br",{})," between ",(0,a.jsx)(t.em,{children:"steps"})," ",(0,a.jsx)("br",{}),"  in the same ",(0,a.jsx)(t.em,{children:"job"})]}),(0,a.jsx)(t.td,{children:"Pass a boolean to control whether the next step should run"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"outputs"})}),(0,a.jsx)(t.td,{children:"Values"}),(0,a.jsx)(t.td,{children:"Workflow (internal)"}),(0,a.jsx)(t.td,{children:"Ephemeral"}),(0,a.jsxs)(t.td,{children:["Propagates ",(0,a.jsx)(t.em,{children:"data"})," ",(0,a.jsx)("br",{})," between ",(0,a.jsx)(t.em,{children:"jobs/steps"})," ",(0,a.jsx)("br",{}),"  in the same ",(0,a.jsx)(t.em,{children:"workflow"})]}),(0,a.jsx)(t.td,{children:"Pass a deployment id to the next job"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"artefacts"}),(0,a.jsx)(t.td,{children:"Files"}),(0,a.jsx)(t.td,{children:"Workflow (internal & external)"}),(0,a.jsx)(t.td,{children:"Persistent"}),(0,a.jsxs)(t.td,{children:["Propagates ",(0,a.jsx)(t.em,{children:"files"})," ",(0,a.jsx)("br",{})," between ",(0,a.jsx)(t.em,{children:"jobs/workflows"})]}),(0,a.jsxs)(t.td,{children:["Pass the project build to different test jobs running in parallel  ",(0,a.jsx)("br",{}),(0,a.jsx)("br",{})," ",(0,a.jsx)(t.em,{children:"Intended for frequently changing data. Files are available for download after the workflow finishes."})]})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"cache"}),(0,a.jsx)(t.td,{children:"Files"}),(0,a.jsx)(t.td,{children:"Workflow (internal & external)"}),(0,a.jsx)(t.td,{children:"Persistent"}),(0,a.jsxs)(t.td,{children:["Propagates ",(0,a.jsx)(t.em,{children:"files"})," ",(0,a.jsx)("br",{})," inside and between ",(0,a.jsx)(t.em,{children:"workflows"})," ",(0,a.jsx)("br",{}),"  in the same ",(0,a.jsx)(t.em,{children:"repository"})]}),(0,a.jsxs)(t.td,{children:["Cache npm packages for use in different workflow runs. ",(0,a.jsx)("br",{}),(0,a.jsx)("br",{})," ",(0,a.jsx)(t.em,{children:"Intended for files that don't change much."})]})]})]})]}),"\n",(0,a.jsxs)(t.p,{children:["For a completer answer: read on.",(0,a.jsx)(t.br,{}),"\n","All the workflow examples in this article ",(0,a.jsx)(t.a,{href:"https://github.com/magmanu/blog/tree/main/demos/github-actions-data-flow",children:"can be found as files here"}),", along with a copy of the respective redacted logs."]}),"\n",(0,a.jsxs)(t.h2,{id:"using-env",children:["Using ",(0,a.jsx)(t.code,{children:"env"})]}),"\n",(0,a.jsxs)(t.p,{children:["It's pretty simple to create a data flow between steps: define a key-value pair and write it to the ",(0,a.jsx)(t.code,{children:"GITHUB_ENV"})," environment file, using the appropriate syntax for your shell. See examples below in bash and python:"]}),"\n",(0,a.jsxs)(n,{children:[(0,a.jsx)("summary",{children:(0,a.jsx)(t.p,{children:"Show code"})}),(0,a.jsx)("div",{children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-yaml",metastring:'title="/.github/workflows/using_env.yaml"',children:'    steps:\n      - name: Two ways to set environment variable with sh\n      # Warning: in this step, the input is not sanitized or validated\n        shell: bash\n        run: |\n          # No print to the logs.\n          random_wiki_article_1=$(curl -L -X GET "https://en.wikipedia.org/api/rest_v1/page/random/summary" | jq .title)\n          echo "$random_wiki_article_1"\n          echo "ARTICLE_1=$random_wiki_article_1" >> "$GITHUB_ENV"\n          # \ud83d\udc09 Print the variable in the logs: only for non-senstive data!\n          random_wiki_article_2=$(curl -L -X GET "https://en.wikipedia.org/api/rest_v1/page/random/summary" | jq .title)\n          echo "ARTICLE_2=$random_wiki_article_2" | tee -a "$GITHUB_ENV"\n\n      - name: Set environment variable with python\n        shell: python\n        # if using "write", use \\n when creating multiple vars\n        # with "print", you can omit \\n\n        run: |\n          from os import environ as env\n          with open(env.get(\'GITHUB_ENV\', None), \'a\') as ghenv:\n            ghenv.write("SUBJECT=Sun\\n")\n            print("STATE=radiant", file=ghenv)\n            print("TIME=today", file=ghenv)\n          \n      - name: \ud83d\udee1\ufe0f Retrieving values securely\n        # observe that ARTICLE_1 was not sanitized or validated, so it\'s vulnerable to injection attacks.\n        # The approach below prevents the issue by setting env.ARTICLE_1 as an argument to the script.\n        # It also gives you the chance to rename the variables\n        env:\n          WHO: ${{ env.SUBJECT }}\n          WHAT: ${{ env.ARTICLE_1 }}\n          WHEN: ${{ env.TIME }}\n        run: |\n          echo "$WHO read about $WHAT $WHEN."\n        \n      - name: \ud83d\udc09 Retrieving values in a potentially vulnerable way\n        # This approach is vulnerable to injection attacks!\n        # Only use it if you have control over the input\n        shell: bash\n        run: |\n          echo "${{ env.SUBJECT }} is ${{ env.STATE }} ${{ env.TIME }}."\n'})})})]}),"\n",(0,a.jsx)(t.h4,{id:"debugging-tip",children:"Debugging tip"}),"\n",(0,a.jsx)(t.p,{children:"To list all the environment variables available in a job, add this tiny step:"}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.code,{children:"- run: env"})}),"\n",(0,a.jsxs)(t.h2,{id:"using-outputs",children:["Using ",(0,a.jsx)(t.code,{children:"outputs"})]}),"\n",(0,a.jsxs)(t.p,{children:["Outputs are available to all steps in the same job, and to any subsequent job that ",(0,a.jsx)(t.code,{children:"needs"})," it.",(0,a.jsx)(t.br,{}),"\n","The output is always an unicode ",(0,a.jsx)(t.strong,{children:"string"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:["And obviously, jobs that depend on an ",(0,a.jsx)(t.code,{children:"output"})," will not run in parallel with the job that produces the output."]}),"\n",(0,a.jsxs)(n,{children:[(0,a.jsx)("summary",{children:(0,a.jsx)(t.p,{children:"Show code"})}),(0,a.jsxs)("div",{children:[(0,a.jsx)(t.p,{children:"For simplicity, I show how to set the output in bash, but you can use any shell of your choice."}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-yaml",metastring:'title="/.github/workflows/outputs-for-different-job.yaml"',children:'jobs:\n  setting-outputs:\n    runs-on: ubuntu-latest\n    // highlight-start\n    outputs:  # Required: name the output in the job level so it\'s available to other jobs\n      person_name: ${{ steps.use-hardcoded-value.outputs.NAME }}\n      location: ${{ steps.use-dynamic-value.outputs.LOCATION }}\n    // highlight-end\n    steps:\n      - id: use-hardcoded-value\n        run: |\n          // highlight-next-line\n          echo "NAME=Marcela" >> "$GITHUB_OUTPUT"\n      \n      - id: use-dynamic-value\n        # note the use of jq -c to get the value as a single line\n        run: |\n          location=$(curl -H "Accept: application/json" https://randomuser.me/api/ | jq -c .results[].location)\n          // highlight-next-line\n          echo "LOCATION=$location" > "$GITHUB_OUTPUT"\n\n  retrieving-outputs:\n    runs-on: ubuntu-latest\n    needs: setting-outputs\n    steps:\n      - name: Greet to location\n        run: |\n          COUNTRY=$(echo $GEODATA | jq -r . | jq .country)\n          echo "Hello $NAME, welcome to $COUNTRY!"\n         // highlight-start\n        env:\n          NAME: ${{needs.setting-outputs.outputs.person_name}}\n          GEODATA: ${{ needs.setting-outputs.outputs.location }}\n        // highlight-end\n'})})]})]}),"\n",(0,a.jsxs)(t.p,{children:["Even though it's recommended to use ",(0,a.jsx)(t.code,{children:"env"})," to pass data between steps, ",(0,a.jsx)(t.code,{children:"outputs"})," can be used for that purpose as well. This is useful when a value is required both in the current job and in subsequent jobs."]}),"\n",(0,a.jsxs)(n,{children:[(0,a.jsx)("summary",{children:(0,a.jsx)(t.p,{children:"Show code"})}),(0,a.jsxs)("div",{children:[(0,a.jsxs)(t.p,{children:["The previous example showed how to use outputs in different jobs.",(0,a.jsx)(t.br,{}),"\n","To use an output the same job, simply add the code in the highlighted section."]}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-yaml",metastring:'title="/.github/workflows/outputs-for-same-job.yaml"',children:'jobs:\n  extract:\n    runs-on: ubuntu-latest\n    outputs:\n      person_name: ${{ steps.generate-hardcoded-value.outputs.name }}\n      location: ${{ steps.enerate-dynamic-value.outputs.location }}\n        steps:\n      - id: generate-hardcoded-value\n        run: |\n          echo "NAME=Marcela" >> "$GITHUB_OUTPUT"\n      - id: generate-dynamic-value\n        run: |\n          location=$(curl -H "Accept: application/json" https://randomuser.me/api/ | jq .results[].location | jq @json) \n          echo "LOCATION=$location" >> "$GITHUB_OUTPUT"\n      // highlight-start\n      - name: Consume output in same job\n        run: |\n          echo "$PERSON, you\'re in $GEODATA, so we\'ve updated your timezone to GMT$OFFSET."\n        env:\n          PERSON: ${{ steps.use-hardcoded-value.outputs.NAME }}\n          # use fromJSON() when filtering the output value at the env level\n          # See more about object filtering in \n          # https://docs.github.com/en/actions/learn-github-actions/expressions#object-filters\n          GEODATA: ${{ fromJSON(steps.use-dynamic-value.outputs.LOCATION).country }}\n          OFFSET: ${{ fromJSON(steps.use-dynamic-value.outputs.LOCATION).timezone.offset }}\n      // highlight-end\n\n    (...)\n'})})]})]}),"\n",(0,a.jsx)(t.admonition,{title:"Helpful debugging info",type:"info",children:(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"An individual output should be 1MB max."}),"\n",(0,a.jsx)(t.li,{children:"All outputs combined should not exceed 50MB."}),"\n"]})}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsxs)(t.admonition,{title:"Real life XP",type:"tip",children:[(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"GITHUB_OUTPUT"})," expects a one-line string.",(0,a.jsx)(t.br,{}),"\n","If you need a multiline output, assign it to a variable and write to the output as follows:"]}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:'echo "PAYLOAD_NAME<<EOF"$\'\\n\'"$payload_var"$\'\\n\'EOF >> "$GITHUB_OUTPUT".\n'})})]}),"\n",(0,a.jsx)(t.h2,{id:"using-artefacts",children:"Using artefacts"}),"\n",(0,a.jsxs)(t.p,{children:['From the docs: "',(0,a.jsx)(t.em,{children:"Use artefacts when you want to save files produced by a job to view after a workflow run has ended, such as built binaries or build logs"}),'."']}),"\n",(0,a.jsx)(t.h3,{id:"uploading-artefacts",children:"Uploading artefacts"}),"\n",(0,a.jsx)(t.p,{children:"You can:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"select one or multiple files to be bundled as an artifact."}),"\n",(0,a.jsx)(t.li,{children:"use wildcards, multiple paths and exclusion patterns in the usual GitHub Actions syntax."}),"\n",(0,a.jsx)(t.li,{children:"set a retention period for the artefact."}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-yaml",metastring:'title="/.github/workflows/handle-artefacts.yaml"',children:"jobs:\n  upload:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n      - name: Upload log files\n        uses: actions/upload-artifact@v4\n        with:\n          name: all-logs      # artefact name\n          path: |             # path to files to be included in the artifact.\n            **/log*.txt       # relative paths are rooted against $GITHUB_WORKSPACE\n          retention-days: 1\n          if-no-files-found: error # force step to fail if the content for the artefact is not found\n"})}),"\n",(0,a.jsxs)(t.p,{children:["Note that maximum retention period ",(0,a.jsx)(t.a,{href:"https://docs.github.com/en/actions/learn-github-actions/usage-limits-billing-and-administration#artifact-and-log-retention-policy",children:"can be defined at repo, organisation, or enterprise level"}),". There's a max of 90 days for public repos and 400 days for private repos. If you lower the retention period, you'll have more non-billed space ;)"]}),"\n",(0,a.jsx)(t.h3,{id:"downloading-artefacts",children:"Downloading artefacts"}),"\n",(0,a.jsx)(t.p,{children:"To retrieve the artefact, you can use:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["the ",(0,a.jsx)(t.a,{href:"https://docs.github.com/en/actions/managing-workflow-runs/downloading-workflow-artifacts",children:"Github UI"})]}),"\n",(0,a.jsxs)(t.li,{children:["the ",(0,a.jsx)(t.a,{href:"https://docs.github.com/en/rest/actions/artifacts?apiVersion=2022-11-28#download-an-artifact",children:"Github API"})]}),"\n",(0,a.jsxs)(t.li,{children:["the ",(0,a.jsxs)(t.a,{href:"https://docs.github.com/en/actions/managing-workflow-runs/downloading-workflow-artifacts?tool=cli",children:[(0,a.jsx)(t.code,{children:"gh"})," cli"]})]}),"\n",(0,a.jsxs)(t.li,{children:["the official ",(0,a.jsx)(t.a,{href:"https://github.com/marketplace/actions/download-a-build-artifact",children:(0,a.jsx)(t.code,{children:"actions/download-artifact"})})," action, if you need to retrieve artifacts programmatically. From ",(0,a.jsx)(t.code,{children:"v4"}),", the action allows you to download artefacts from a different workflows or repos, as long as you provide a token. (\ud83d\udee1\ufe0f: it's recommended to use a GitHub App rather than a PAT for professional projects.)"]}),"\n"]}),"\n",(0,a.jsxs)(t.p,{children:["Let's see how to retrieve the artefact we created in the previous example using ",(0,a.jsx)(t.code,{children:"actions/download-artifact"}),":"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-yaml",metastring:'title="/.github/workflows/handle-artefacts.yaml"',children:'download:\n    runs-on: ubuntu-latest\n    needs: upload\n    steps:\n      - name: Download log files\n        id: download-artifacts\n        uses: actions/download-artifact@v4\n        with:\n          name: all-logs  # note it uses the name defined in the upload step\n        \n      - name: Pass artifact path to python\n        shell: python\n        run: |\n          import os\n          from glob import glob\n          artifact_path = os.environ.get("ARTIFACT_PATH", "")\n          glob_list = glob(artifact_path + "/*.txt")\n          for filename in glob_list:\n              with open(filename, "r", encoding="UTF-8") as f:\n                  content = f.read()\n                  print(content)\n        env:\n          ARTIFACT_PATH: ${{ steps.download-artifacts.outputs.download-path }}\n'})}),"\n",(0,a.jsx)(t.p,{children:"All the zipping and unzipping of the artifacts is automatically handled by the actions."}),"\n",(0,a.jsx)(t.h3,{id:"deleting-artefacts",children:"Deleting artefacts"}),"\n",(0,a.jsx)(t.p,{children:"To delete an artefact, you can:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["use the ",(0,a.jsx)(t.a,{href:"https://docs.github.com/en/actions/managing-workflow-runs/removing-workflow-artifacts",children:"Github UI"})]}),"\n",(0,a.jsxs)(t.li,{children:["use the ",(0,a.jsx)(t.a,{href:"https://docs.github.com/en/rest/reference/actions#delete-an-artifact",children:"Github API"})]}),"\n",(0,a.jsxs)(t.li,{children:["write a ",(0,a.jsx)(t.a,{href:"https://gist.github.com/qwe321qwe321qwe321/efae4569576006624c34f23b2dd76a58",children:"custom script using the Github API"})," or using a ",(0,a.jsx)(t.a,{href:"https://github.com/GeekyEggo/delete-artifact",children:"community action"}),"."]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"using-cache",children:"Using cache"}),"\n",(0,a.jsx)(t.admonition,{title:"\ud83d\udc09 Security warning",type:"danger",children:(0,a.jsx)(t.p,{children:"Do not store sensitive information in the cache (beware of configuration files containing secrets), as the cache is accessible to anyone who can create a PR on the repository, even on forks."})}),"\n",(0,a.jsx)(t.p,{children:"When we're handling data that is pretty stable and repeatedly used (like dependencies), we can do better than re-generating them every time: we can cache them for better performance."}),"\n",(0,a.jsxs)(t.p,{children:["In the example below, we're caching the ",(0,a.jsx)(t.code,{children:"pip"})," dependencies for a Python project. Note that we have added the cache step before the pip install step. The idea is that the install will only happen if the cache is not good or available:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-yaml",metastring:'title="/.github/workflows/cache.yaml"',children:"jobs:\n  cache:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-python@v5\n        with:\n          python-version: '3.12'\n          cache: 'pip'\n          cache-dependency-path: |\n            **/requirements.txt\n      \n      - name: Get pip cache dir\n        id: pip-cache\n        run: |\n          echo \"dir=$(pip cache dir)\" >> $GITHUB_OUTPUT\n\n      - name: Handle cache for Python dependencies\n        uses: actions/cache@v3\n        The cache action requires a `path` to the cache and a `key`. The `key` is used to retrieve the cache and to recreate it next time. \n        id: cache\n        with:\n          # path: location of files to cache\n          path: ${{ steps.pip-cache.outputs.dir }} \n          # key: unique id used to retrieve and recreate the cache\n          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }} \n        \n      - name: Install dependencies if not found in cache\n        if: steps.cache.outputs.cache-hit != 'true'\n        run: pip install -r requirements.txt\n"})}),"\n",(0,a.jsx)(t.h3,{id:"setting-the-cache",children:"Setting the cache"}),"\n",(0,a.jsxs)(t.p,{children:["The first time the workflow runs, the cache is obviously empty. Therefore, the output ",(0,a.jsx)(t.code,{children:"cache-hit"})," (native to the official ",(0,a.jsx)(t.code,{children:"actions/cache"})," action), will return ",(0,a.jsx)(t.code,{children:"false"}),", which in turn makes our workflow run the install step.",(0,a.jsx)(t.br,{}),"\n",(0,a.jsx)(t.a,{href:"https://raw.githubusercontent.com/magmanu/blog/main/demos/github-actions-data-flow/31_data_flow_cache_set-cache.txt",children:(0,a.jsx)(t.em,{children:"Check logs"})})]}),"\n",(0,a.jsxs)(t.p,{children:["However, a small magic happens too: a post-cache step, automatically added by ",(0,a.jsx)(t.code,{children:"action/cache"})," at the end of the job, will look at the keys your provided and add the files to the cache."]}),"\n",(0,a.jsx)(t.h3,{id:"retrieving-the-cache",children:"Retrieving the cache"}),"\n",(0,a.jsxs)(t.p,{children:["As long as nothing has changed in your dependency manifest, the next time ",(0,a.jsx)(t.code,{children:"actions/cache"})," runs for that path and key, the action will find a ",(0,a.jsx)(t.code,{children:"cache-hit"}),"and the workflow will safely skip the install step.",(0,a.jsx)(t.br,{}),"\n",(0,a.jsx)(t.a,{href:"https://raw.githubusercontent.com/magmanu/blog/main/demos/github-actions-data-flow/32_data_flow_cache_use-cache.txt",children:(0,a.jsx)(t.em,{children:"Check logs"})})]}),"\n",(0,a.jsx)(t.h3,{id:"updating-the-cache",children:"Updating the cache"}),"\n",(0,a.jsxs)(t.p,{children:["Have you noted the ",(0,a.jsx)(t.code,{children:"hashFiles"})," function used in the ",(0,a.jsx)(t.code,{children:"key"})," argument?",(0,a.jsx)(t.br,{}),"\n","This is a function provided by GitHub Actions that creates a unique hash value based on a file path. When the hash value doesn't match, it means that there was a change in the file - in our case, the dependency manifest."]}),"\n",(0,a.jsxs)(t.p,{children:["If the dependencies changed (even a single patch), the cache is no good anymore and the ",(0,a.jsx)(t.code,{children:"cache-hit"})," output will allow ",(0,a.jsx)(t.code,{children:"pip install"})," to run. And then we're back to square one: dependencies are installed and the cache is updated on a post-cache job.",(0,a.jsx)(t.br,{}),"\n",(0,a.jsx)(t.a,{href:"https://raw.githubusercontent.com/magmanu/blog/main/demos/github-actions-data-flow/33_data_flow_cache_update-cache.txt",children:(0,a.jsx)(t.em,{children:"Check the logs"})})]}),"\n",(0,a.jsx)(t.h3,{id:"last-notes-about-caching",children:"Last notes about caching"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"If you\u2019re using self-hosted runners, the option to self-store the cache is only available in Enterprise plans."}),"\n",(0,a.jsxs)(t.li,{children:["This action ",(0,a.jsx)(t.code,{children:"actions/cache"})," manages the cache centrally. This means that the cache is available to (and updatable by) all jobs in the same repository - and even to other workflows."]}),"\n",(0,a.jsxs)(t.li,{children:["Read more about ",(0,a.jsx)(t.a,{href:"https://github.com/actions/cache/blob/main/caching-strategies.md",children:"caching strategies here"}),"."]}),"\n"]}),"\n",(0,a.jsxs)(t.p,{children:["That was a long post, phew.",(0,a.jsx)(t.br,{}),"\n","See you later!  :)"]})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>r});var a=n(6540);const i={},s=a.createContext(i);function o(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);