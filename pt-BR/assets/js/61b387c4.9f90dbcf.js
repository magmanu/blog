"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8262],{3905:(e,a,n)=>{n.d(a,{Zo:()=>u,kt:()=>f});var t=n(7294);function o(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function i(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function s(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?i(Object(n),!0).forEach((function(a){o(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function r(e,a){if(null==e)return{};var n,t,o=function(e,a){if(null==e)return{};var n,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],a.indexOf(n)>=0||(o[n]=e[n]);return o}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=t.createContext({}),m=function(e){var a=t.useContext(l),n=a;return e&&(n="function"==typeof e?e(a):s(s({},a),e)),n},u=function(e){var a=m(e.components);return t.createElement(l.Provider,{value:a},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},d=t.forwardRef((function(e,a){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),c=m(n),d=o,f=c["".concat(l,".").concat(d)]||c[d]||p[d]||i;return n?t.createElement(f,s(s({ref:a},u),{},{components:n})):t.createElement(f,s({ref:a},u))}));function f(e,a){var n=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var i=n.length,s=new Array(i);s[0]=d;var r={};for(var l in a)hasOwnProperty.call(a,l)&&(r[l]=a[l]);r.originalType=e,r[c]="string"==typeof e?e:o,s[1]=r;for(var m=2;m<i;m++)s[m]=n[m];return t.createElement.apply(null,s)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6876:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>r,toc:()=>m});var t=n(7462),o=(n(7294),n(3905));const i={slug:"dynamic-json-in-terraform",title:"Como Gerar JSON Din\xe2mico no Terraform",authors:"manu",tags:["infra","terraform","IaC","step functions","devops"]},s=void 0,r={permalink:"/blog/pt-BR/tech/dynamic-json-in-terraform",source:"@site/i18n/pt-BR/docusaurus-plugin-content-blog-tech/2023-03-18-dynamic-json-in-terraform/index.md",title:"Como Gerar JSON Din\xe2mico no Terraform",description:"Quem programa n\xe3o se aguenta, n\xe9? N\xe3o pode ver uma coisinha declarativa que j\xe1 quer fazer um loop, colocar uma l\xf3gica, faz qualquer coisa menos... declara\xe7\xe3o.",date:"2023-03-18T00:00:00.000Z",formattedDate:"18 de mar\xe7o de 2023",tags:[{label:"infra",permalink:"/blog/pt-BR/tech/tags/infra"},{label:"terraform",permalink:"/blog/pt-BR/tech/tags/terraform"},{label:"IaC",permalink:"/blog/pt-BR/tech/tags/ia-c"},{label:"step functions",permalink:"/blog/pt-BR/tech/tags/step-functions"},{label:"devops",permalink:"/blog/pt-BR/tech/tags/devops"}],readingTime:8.91,hasTruncateMarker:!0,authors:[{name:"Manu Magalh\xe3es",title:"Engenheira de DevSecOps",url:"https://github.com/magmanu",imageURL:"https://github.com/magmanu.png",key:"manu"}],frontMatter:{slug:"dynamic-json-in-terraform",title:"Como Gerar JSON Din\xe2mico no Terraform",authors:"manu",tags:["infra","terraform","IaC","step functions","devops"]},prevItem:{title:"GitHub Actions: Fluxo e Persist\xeancia de Dados em Workflows",permalink:"/blog/pt-BR/tech/github-actions-data-flow"},nextItem:{title:"Solu\xe7\xe3o: Terraform n\xe3o deixa tern\xe1rios terem tipos diferentes",permalink:"/blog/pt-BR/tech/terraform-ternary-error"}},l={authorsImageUrls:[void 0]},m=[{value:"O que vamos fazer",id:"o-que-vamos-fazer",level:2},{value:"Caso 1: Injetando uma vari\xe1vel no JSON",id:"caso-1-injetando-uma-vari\xe1vel-no-json",level:2},{value:"Caso 2: Injetando uma lista no JSON",id:"caso-2-injetando-uma-lista-no-json",level:2},{value:"A solu\xe7\xe3o mais simples: lista expl\xedcita",id:"a-solu\xe7\xe3o-mais-simples-lista-expl\xedcita",level:3},{value:"A solu\xe7\xe3o com muita l\xf3gica: lista din\xe2mica",id:"a-solu\xe7\xe3o-com-muita-l\xf3gica-lista-din\xe2mica",level:3},{value:"Caso 3: Injetando um objeto no JSON",id:"caso-3-injetando-um-objeto-no-json",level:2},{value:"Arquivos Finais",id:"arquivos-finais",level:2}],u={toc:m},c="wrapper";function p(e){let{components:a,...n}=e;return(0,o.kt)(c,(0,t.Z)({},u,n,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Quem programa n\xe3o se aguenta, n\xe9? N\xe3o pode ver uma coisinha declarativa que j\xe1 quer fazer um loop, colocar uma l\xf3gica, faz qualquer coisa menos... declara\xe7\xe3o."),(0,o.kt)("p",null,"Aqui vou mostrar como gerar um JSON din\xe2mico no Terraform. Neste artigo vou usar Step Functions como exemplo, mas voc\xea pode usar o JSON que quiser."),(0,o.kt)("h2",{id:"o-que-vamos-fazer"},"O que vamos fazer"),(0,o.kt)("p",null,"O JSON abaixo vai sofrer uma transforma\xe7\xe3o. Vamos substituir os valores est\xe1ticos por:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"#caso-1-injetando-uma-vari%C3%A1vel-no-json"},"Uma vari\xe1vel")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"#caso-2-injetando-uma-lista-no-json"},"Uma lista din\xe2mica")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"#caso-3-injetando-um-objeto-no-json"},"Um ou mais objetos din\xe2micos"))),(0,o.kt)("p",null,"(Adicionei coment\xe1rios n\xe3o idiom\xe1ticos dentro do c\xf3digo, mas \xe9 s\xf3 para deixar bem claro o que estamos fazendo.)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:"title='JSON de refer\xeancia'",title:"'JSON",de:!0,"refer\xeancia'":!0},'{\n    "Comment": "My state machine",\n    "StartAt": "Choice",\n    "States": {\n        "Handle Notification": {\n            "Type": "Task",\n            "Resource": "arn:aws:states:::lambda:invoke",\n            "OutputPath": "$.Payload",\n            "Parameters": {\n              "Payload.$": "$",\n              // highlight-start\n              ----\x3e Caso 1: Substituir a string expl\xedcita por uma string din\xe2mica\n              "FunctionName": "my_function_name"\n              // highlight-end\n            },\n            "End": true\n        },\n        "Choice": {\n          "Type": "Choice",\n           // highlight-start\n          ----\x3e Caso 2: Substituir por uma lista din\xe2mica\n          "Choices": [                          \n             {                                           \n               "IsPresent": true,                        \n               "Next": "SSM Execution-InstanceId",       \n               "Variable": "$.InstanceId"                \n              },                                         \n              {                                          \n               "IsPresent": true,                        \n               "Next": "SSM Execution-SecurityGroupIds", \n               "Variable": "$.SecurityGroupIds"          \n              }                                          \n            ],                                   \n            // highlight-end\n            "Default": "Pass"\n        },\n        // highlight-start\n        ----\x3e Caso 3: Substituir por um ou mais objetos din\xe2micos\n        "SSM Execution-InstanceId": {        \n            "Next": "Pass",                          \n            "Parameters": {                          \n                "DocumentName.$": "$.DocumentName",  \n                "Parameters": {                      \n                    "InstanceId.$": "States.Array($.InstanceId)"\n                }                                    \n              },                                     \n            "Resource": "arn:aws:states:::aws-sdk:ssm:startAutomationExecution",\n            "ResultPath": "$.TaskResult",            \n            "Type": "Task"                           \n        },                                           \n        "SSM Execution-SecurityGroupIds": {          \n            "Next": "Pass",                          \n            "Parameters": {                          \n                "DocumentName.$": "$.DocumentName",  \n                "Parameters": {                      \n                    "SecurityGroupIds.$": "States.Array($.SecurityGroupIds)"\n                }                                    \n            },                                       \n            "Resource": "arn:aws:states:::aws-sdk:ssm:startAutomationExecution",\n            "ResultPath": "$.TaskResult",            \n            "Type": "Task"                           \n        },                                   \n        // highlight-end\n        "Pass": {\n            "Type": "Pass",\n            "End": true\n        }\n    }\n}\n')),(0,o.kt)("p",null,"Primeiro, salve o JSON acima em formato de template. Voc\xea pode usar a extens\xe3o ",(0,o.kt)("inlineCode",{parentName:"p"},".tpl")," ou ",(0,o.kt)("inlineCode",{parentName:"p"},".tftpl"),". Embora o Terraform recomende usar a segunda op\xe7\xe3o, n\xe3o existe uma regra r\xedgida sobre qual extens\xe3o usar."),(0,o.kt)("h2",{id:"caso-1-injetando-uma-vari\xe1vel-no-json"},"Caso 1: Injetando uma vari\xe1vel no JSON"),(0,o.kt)("p",null,"Vamos come\xe7ar atualizando o valor ",(0,o.kt)("inlineCode",{parentName:"p"},"FunctionName")," no template, usando interpola\xe7\xe3o:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:"title='modules/templates/stepfunction_definition.tftpl (parcial)'",title:"'modules/templates/stepfunction_definition.tftpl","(parcial)'":!0},'\n{"Handle Notification": {\n        "Type": "Task",\n        "Resource": "arn:aws:states:::lambda:invoke",\n        "OutputPath": "$.Payload",\n        "Parameters": {\n          "Payload.$": "$",\n          // highlight-next-line\n          "FunctionName": "${nome_da_lambda}"\n        },\n        "End": true\n      }\n}\n')),(0,o.kt)("p",null,"O template precisa ser renderizado como um JSON v\xe1lido, ent\xe3o vamos usar a fun\xe7\xe3o ",(0,o.kt)("inlineCode",{parentName:"p"},"templatefile")," do Terraform. Pra isso, usamos dois argumentos: o caminho (path) do template e um mapa de vari\xe1veis a serem injetadas na runtime (execu\xe7\xe3o). Vou tentar manter o m\xf3dulo o mais din\xe2mico poss\xedvel, e vou incluir locals, vari\xe1veis e resources (recursos) do Terraform para mostrar como as coisas funcionam juntas."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hcl",metastring:"title='modules/stepfunction.tf (full file)'",title:"'modules/stepfunction.tf","(full":!0,"file)'":!0},'\nlocals {\n    file = templatefile("${path.module}/templates/stepfunction_definition.tpl", {\n        nome_da_lambda = var.nome_da_lambda\n    })\n}\nvariable "nome_da_lambda" {\n    description = "Nome da lambda"\n    type        = string\n}\n\nresource "aws_sfn_state_machine" "sfn_state_machine" {\n    name        = var.nome_da_step_function\n    role_arn    = var.sf_role_arn\n    definition  = local.file\n}\n')),(0,o.kt)("p",null,"Agora vamos salvar um ",(0,o.kt)("inlineCode",{parentName:"p"},"main.tf")," um n\xedvel acima, onde os valores expl\xedcitos (hardcoded) ser\xe3o definidos."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hcl",metastring:"title='main.tf (full file)'",title:"'main.tf","(full":!0,"file)'":!0},'\n# main.tf (arquivo completo)\n\nmodule "minha_step_function" {\n  source                = "./modules/step_functions"\n  nome_da_step_function    = "autoremedia\xe7\xe3o"\n  sf_role_arn           = "arn:aws:iam::123456789012:role/autoremedia\xe7\xe3o"\n  nome_da_lambda  = "lambda_de_autoremedia\xe7\xe3o"\n}\n')),(0,o.kt)("p",null,"Se quiser conferir que a vari\xe1vel foi injetada com sucesso, execute ",(0,o.kt)("inlineCode",{parentName:"p"},"terraform init && terraform plan")," no terminal."),(0,o.kt)("h2",{id:"caso-2-injetando-uma-lista-no-json"},"Caso 2: Injetando uma lista no JSON"),(0,o.kt)("p",null,"S\xf3 pra lembrar, esta \xe9 a lista que estamos refatorando:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:"title='modules/templates/stepfunction_definition.tftpl (parcial)'",title:"'modules/templates/stepfunction_definition.tftpl","(parcial)'":!0},'\n"Choice": {\n    "Type": "Choice",\n    // highlight-start\n    "Choices": [                            \n        {                                           \n          "IsPresent": true,                        \n          "Next": "SSM Execution-InstanceId",       \n          "Variable": "$.InstanceId"                \n        },                                          \n        {                                           \n          "IsPresent": true,                        \n          "Next": "SSM Execution-SecurityGroupIds", \n          "Variable": "$.SecurityGroupIds"          \n        }                                           \n    ],                                      \n    // highlight-end\n    "Default": "Pass"\n}\n')),(0,o.kt)("p",null,"Vamos refatorar o template de novo. Vamos usar uma fun\xe7\xe3o do Terraform chamada ",(0,o.kt)("inlineCode",{parentName:"p"},"jsonencode"),", que faz a lista de objetos usada no template ser renderizada como JSON:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:"title='modules/templates/stepfunction_definition.tftpl (parcial)'",title:"'modules/templates/stepfunction_definition.tftpl","(parcial)'":!0},'\n"Choice": {\n    "Type": "Choice",\n    // highlight-next-line\n    "Choices": ${jsonencode(lista_de_op\xe7\xf5es)},\n    "Default": "Pass"\n    }\n')),(0,o.kt)("p",null,"Agora, vamos ver duas maneiras de passar a lista para o template."),(0,o.kt)("h3",{id:"a-solu\xe7\xe3o-mais-simples-lista-expl\xedcita"},"A solu\xe7\xe3o mais simples: lista expl\xedcita"),(0,o.kt)("p",null,"Uma op\xe7\xe3o \xe9 criar uma vari\xe1vel que vai passar uma lista pronta:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hcl",metastring:"title='modules/stepfunction.tf (pacial)'",title:"'modules/stepfunction.tf","(pacial)'":!0},'\nlocals {\n    file = templatefile("${path.module}/templates/stepfunction_definition.tpl", {\n        nome_da_lambda = var.nome_da_lambda\n        // highlight-next-line\n        lista_de_op\xe7\xf5es = var.minha_lista\n    })\n}\n// highlight-start\nvariable "minha_lista" {\n    description = "A lista que voc\xea quiser"\n    type = list\n// highlight-end\n}\n')),(0,o.kt)("p",null,"Agora, no m\xf3dulo ",(0,o.kt)("inlineCode",{parentName:"p"},"main.tf"),", passe os valores das vari\xe1veis. O JSON ficou \xe9 din\xe2mico, mas a lista \xe9 ainda \xe9 meio \u201cest\xe1tica\u201d porque foi definida explicitamente no m\xf3dulo principal. E v\xe1rias vezes, isso basta."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hcl",metastring:"title='main.tf (full file)'",title:"'main.tf","(full":!0,"file)'":!0},'\nmodule "minha_step_function" {\n    source                = "./modules/step_functions"\n    nome_da_step_function    = "autoremedia\xe7\xe3o"\n    sf_role_arn           = "arn:aws:iam::123456789012:role/autoremedia\xe7\xe3o"\n    nome_da_lambda  = "lambda_de_autoremedia\xe7\xe3o"\n\n    // highlight-start\n    minha_lista = [{\n        "IsPresent": true,\n        "Next": "SSM Execution-InstanceId",\n        "Variable": "$.InstanceId"\n    }]\n    // highlight-end\n}\n')),(0,o.kt)("h3",{id:"a-solu\xe7\xe3o-com-muita-l\xf3gica-lista-din\xe2mica"},"A solu\xe7\xe3o com muita l\xf3gica: lista din\xe2mica"),(0,o.kt)("p",null,"Mas e se voc\xea quiser que a lista em si tamb\xe9m seja din\xe2mica? Por exemplo, voc\xea quer gerar a lista extraindo os valores de um par\xe2metro, e depois enviar a lista para o json?\nEm nosso exemplo, vamos gerar as listas de ",(0,o.kt)("inlineCode",{parentName:"p"},"Next")," e ",(0,o.kt)("inlineCode",{parentName:"p"},"Variable")," extraindo as chaves (keys) que est\xe3o em ",(0,o.kt)("inlineCode",{parentName:"p"},"ssm_params"),", no arquivo principal ",(0,o.kt)("inlineCode",{parentName:"p"},"main.tf"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hcl",metastring:"title='main.tf (extract)'",title:"'main.tf","(extract)'":!0},'\nmodule "minha_step_function" {\n    source                = "./modules/step_functions"\n    nome_da_step_function    = "autoremedia\xe7\xe3o"\n    sf_role_arn           = "arn:aws:iam::123456789012:role/autoremedia\xe7\xe3o"\n    nome_da_lambda  = "lambda_de_autoremedia\xe7\xe3o"\n\n    // highlight-start\n    # Tiramos a lista est\xe1tica que estava aqui\n    ssm_params = [\n        {"InstanceId": "States.Array($.InstanceId)"},    \n        {"SecurityGroupIds": "States.Array($.SecurityGroupIds)"}\n    ]\n    // highlight-end\n}\n')),(0,o.kt)("p",null,"Nosso m\xf3dulo vai ficar assim:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hcl",metastring:"title='modules/stepfunction.tf (full file)'",title:"'modules/stepfunction.tf","(full":!0,"file)'":!0},'\nlocals {\n    lista_de_op\xe7\xf5es = flatten([for item in var.ssm_params: [\n        for chave, valor in item : {\n            "IsPresent": true,\n            "Next": "SSM Execution-${chave}"\n            "Variable": "$.${chave}",\n        }]\n    ])\n    file = templatefile("${path.module}/templates/stepfunction_definition.tpl", {\n        nome_da_lambda = var.nome_da_lambda,\n        lista_de_op\xe7\xf5es = local.lista_de_op\xe7\xf5es\n    })\n}\n\nvariable "nome_da_lambda" {\n    description = "Nome da lambda"\n    type        = string\n}\n\nvariable "ssm_params" {\n    description = "Lista dos par\xe2metros de SSM a serem injetados"\n    type = list\n}\n\nresource "aws_sfn_state_machine" "sfn_state_machine" {\n    name        = var.nome_da_step_function\n    role_arn    = aws_iam_role.step_function_role_arn\n    definition  = local.file\n}\n')),(0,o.kt)("p",null,"Come\xe7ando com a linha ",(0,o.kt)("inlineCode",{parentName:"p"},"lista_de_op\xe7\xf5es = flatten([for item in var.ssm_params:")," ignore ",(0,o.kt)("inlineCode",{parentName:"p"},"flatten")," por um momento e observe o loop. "),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"ssm_params")," \xe9 uma lista, e vamos ver cada item. O loop est\xe1 entre colchetes, o que significa que o resultado ser\xe1 uma lista. O ",(0,o.kt)("inlineCode",{parentName:"p"},":")," que se segue \xe9 apenas parte da sintaxe do loop."),(0,o.kt)("p",null,"Na linha a seguir, temos outro loop: ",(0,o.kt)("inlineCode",{parentName:"p"},"for chave, valor in item : {")," . Este loop passa em cada objeto do ",(0,o.kt)("inlineCode",{parentName:"p"},"ssm_params"),", acessando a chave e o valor. Assim, podemos extrair e reestruturar os dados. O loop tamb\xe9m \xe9 colocado entre colchetes, o que significa que, infelizmente, cada objeto estar\xe1 dentro de uma lista pr\xf3pria. O resultado final vai ficar assim: ",(0,o.kt)("inlineCode",{parentName:"p"},"[[obj1],[obj2]]")),(0,o.kt)("p",null,"Agora, lembra do ",(0,o.kt)("inlineCode",{parentName:"p"},"flatten"),"? Essa fun\xe7\xe3o do Terraform \xe9 necess\xe1ria porque precisamos achatar (flatten) esse resultado que est\xe1 cheio de aninhamento (nesting) desnecess\xe1rio. O flatten faz nosso resultado ficar assim: ",(0,o.kt)("inlineCode",{parentName:"p"},"[obj1, obj2]"),"."),(0,o.kt)("p",null,"Pronto."),(0,o.kt)("h2",{id:"caso-3-injetando-um-objeto-no-json"},"Caso 3: Injetando um objeto no JSON"),(0,o.kt)("p",null,"Agora, a parte mais emocionante. Vamos abstrair objetos inteiros. (Neste caso, significa que etapas inteiras das Step Functions podem ficar din\xe2micas!)\nT\xe1 vendo isso tudo a\xed embaixo? Vai tudo embora!"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'"Steps": {\n    // highlight-start\n    "SSM Execution-InstanceId": {           \n            "Next": "Pass",                          \n            "Parameters": {                          \n                "DocumentName.$": "$.DocumentName",  \n                "Parameters": {                      \n                    "InstanceId.$": "States.Array($.InstanceId)"\n                }                                    \n              },                                     \n            "Resource": "arn:aws:states:::aws-sdk:ssm:startAutomationExecution",\n            "ResultPath": "$.TaskResult",            \n            "Type": "Task"                           \n        },                                           \n        "SSM Execution-SecurityGroupIds": {          \n            "Next": "Pass",                          \n            "Parameters": {                          \n                "DocumentName.$": "$.DocumentName",  \n                "Parameters": {                      \n                    "SecurityGroupIds.$": "States.Array($.SecurityGroupIds)"\n                }                                    \n            },                                       \n            "Resource": "arn:aws:states:::aws-sdk:ssm:startAutomationExecution",\n            "ResultPath": "$.TaskResult",            \n            "Type": "Task"                           \n        }                                   \n        // highlight-end\n}\n')),(0,o.kt)("p",null,"Pra variar, vamos modificar o template:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hcl",metastring:"title='modules/templates/stepfunction_definition.tftpl (parcial)'",title:"'modules/templates/stepfunction_definition.tftpl","(parcial)'":!0},'\n"States": {\n    "Choice": {\n      "Type": "Choice",\n      "Choices": ${jsonencode(choices)},\n      "Default": "Pass"\n    },\n    / highlight-start\n    %{ for chave, data in ssm_execution }   \n        "${chave}": ${jsonencode(data)},\n    %{ endfor }\n    "Handle Notification": {<--- bl\xe1bl\xe1--\x3e}\n    }\n    // highlight-end\n')),(0,o.kt)("p",null,"Se seu linter reclamar, mantenha a f\xe9 que t\xe1 tudo certo.  "),(0,o.kt)("p",null,"Mas o que est\xe1 acontecendo? Estamos usando a sintaxe ",(0,o.kt)("a",{parentName:"p",href:"https://developer.hashicorp.com/terraform/language/expressions/strings#directives"},"diretiva do Terraform")," ",(0,o.kt)("inlineCode",{parentName:"p"},"%{}")," para escrever uma string din\xe2mica (pois \xe9, templates s\xe3o tratados como strings) ."),(0,o.kt)("p",null,"A linha ",(0,o.kt)("inlineCode",{parentName:"p"},"%{ for chave, data in ssm_execution }")," informa \xe0 fun\xe7\xe3o ",(0,o.kt)("inlineCode",{parentName:"p"},"templatefile")," que uma itera\xe7\xe3o vai come\xe7ar, e que cs\xf3 termina quando chegar na linha ",(0,o.kt)("inlineCode",{parentName:"p"},"%{ endfor }"),". Enquanto isso, a fun\xe7\xe3o vai ontinuar criando pares de chave-valor com o formato ",(0,o.kt)("inlineCode",{parentName:"p"},'"minha_chave": {"meu": "json"},'),"."),(0,o.kt)("p",null,"Legal, n\xe9?"),(0,o.kt)("p",null,"Ent\xe3o agora vamos adicionar o valor local ",(0,o.kt)("inlineCode",{parentName:"p"},"ssm_execution"),", a l\xf3gica que ir\xe1 preencher tudo isso."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hcl",metastring:"title='modules/stepfunction.tf (parcial)'",title:"'modules/stepfunction.tf","(parcial)'":!0},'\nlocals {\n    choices = flatten([for item in var.ssm_params: [\n        for chave, valor in item : {\n            "IsPresent": true,\n            "Next": "SSM Execution-${chave}"\n            "Variable": "$.${chave}",\n        }]\n    ])\n\n    // highlight-start\n    ssm_execution = merge(flatten([for item in var.ssm_params: [ \n                    for chave, valor in item : {\n                        "SSM Execution-${chave}": {\n                            "Type": "Task",\n                            "Parameters": {\n                              "DocumentName.$": "$.DocumentName",\n                              "Parameters": {"$.${chave}": "${valor}"}\n                            },\n                            "Resource": "arn:aws:states:::aws-sdk:ssm:startAutomationExecution",\n                            "Next": "Handle Notification",\n                            "ResultPath": "$.TaskResult"\n                        }\n                    }\n                    ]]\n                )...)\n    // highlight-end\n\n    file = templatefile("${path.module}/templates/stepfunction_definition.tpl", {\n        nome_da_lambda = var.nome_da_lambda,\n        lista_de_op\xe7\xf5es = local.choices,\n        // highlight-next-line\n        ssm_execution = local.ssm_execution\n    })\n}\n')),(0,o.kt)("p",null,"J\xe1 estamos familiarizados com loops e flatten, ent\xe3o vamos falar sobre as novidades: ",(0,o.kt)("inlineCode",{parentName:"p"},"merge")," e ",(0,o.kt)("inlineCode",{parentName:"p"},"..."),"."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"merge")," \xe9 uma fun\xe7\xe3o do Terraform que junta v\xe1rios objetos em um s\xf3. Ent\xe3o, se tivermos dois objetos assim:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'   {\n     "a": 1,\n     "b": 2\n   },\n   {\n     "c": 3,\n     "d": 4\n   }\n')),(0,o.kt)("p",null,"a fun\xe7\xe3o ",(0,o.kt)("inlineCode",{parentName:"p"},"merge")," vai transform\xe1-los em:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n     "a": 1,\n     "b": 2,\n     "c": 3,\n     "d": 4\n}\n')),(0,o.kt)("p",null,"E se voc\xea estava prestando aten\xe7\xe3o, notou que a fun\xe7\xe3o merge em nosso m\xf3dulo ",(0,o.kt)("strong",{parentName:"p"},"n\xe3o")," est\xe1 usando objetos como argumento, ela est\xe1 usando a fun\xe7\xe3o flatten (que gera uma \xfanica lista). O truque est\xe1 aqui: ",(0,o.kt)("inlineCode",{parentName:"p"},"..."),"."),(0,o.kt)("p",null,"No Terraform, ",(0,o.kt)("inlineCode",{parentName:"p"},"...")," (tr\xeas pontos) funciona como o operador spread em Javascript: ele expande a lista em argumentos separados, individuais."),(0,o.kt)("p",null,"Ent\xe3o \xe9 isso. Nosso template final ficou literalmente com metade do tamanho do JSON original. Ele \xe9 din\xe2mico, reutiliz\xe1vel e o melhor de tudo \u2013 voc\xea nunca mais vai precisar o Amazon States Language no seu projeto. Vale cada minuto investido."),(0,o.kt)("h2",{id:"arquivos-finais"},"Arquivos Finais"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hcl",metastring:"title='modules/templates/stepfunction_definition.tpl'",title:"'modules/templates/stepfunction_definition.tpl'"},'\n{\n    "Comment": "My state machine",\n    "StartAt": "Choice",\n    "States": {\n        "Handle Notification": {\n            "Type": "Task",\n            "Resource": "arn:aws:states:::lambda:invoke",\n            "OutputPath": "$.Payload",\n            "Parameters": {\n              "Payload.$": "$",\n              "FunctionName": "${nome_da_lambda}"\n            },\n            "End": true\n        },\n        "Choice": {\n            "Type": "Choice",\n            "Choices": ${jsonencode(choices)},\n            "Default": "Pass"\n        },\n        %{ for chave, data in ssm_execution }\n        "${chave}": ${jsonencode(data)},\n        %{ endfor }\n        "Pass": {\n            "Type": "Pass",\n            "End": true\n        }\n    }\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hcl",metastring:"title='modules/stepfunction.tf'",title:"'modules/stepfunction.tf'"},'locals {\n    choices = flatten([for item in var.ssm_params: [\n        for chave, valor in item : {\n            "IsPresent": true,\n            "Next": "SSM Execution-${chave}"\n            "Variable": "$.${chave}",\n        }]\n    ])\n\n    ssm_execution = merge(flatten([for item in var.ssm_params: [ \n                    for chave, valor in item : {\n                        "SSM Execution-${chave}": {\n                            "Type": "Task",\n                            "Parameters": {\n                              "DocumentName.$": "$.DocumentName",\n                              "Parameters": {"$.${chave}": "${valor}"}\n                            },\n                            "Resource": "arn:aws:states:::aws-sdk:ssm:startAutomationExecution",\n                            "Next": "Handle Notification",\n                            "ResultPath": "$.TaskResult"\n                        }\n                    }\n                    ]]\n                )...)\n\n    file = templatefile("${path.module}/templates/stepfunction_definition.tpl", {\n        nome_da_lambda = var.nome_da_lambda,\n        lista_de_op\xe7\xf5es = local.choices,\n        ssm_execution = local.ssm_execution\n    })\n}\n\nvariable "nome_da_lambda" {\n    description = "Nome da lambda"\n    type        = string\n}\n\nvariable "ssm_params" {\n    description = "Lista dos par\xe2metros de SSM a serem injetados"\n    type = list\n}\n\nresource "aws_sfn_state_machine" "sfn_state_machine" {\n    name        = var.nome_da_step_function\n    role_arn    = var.sf_role_arn\n    definition  = local.file\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hcl",metastring:"title='main.tf'",title:"'main.tf'"},'# main.tf (arquivo completo)\n\nmodule "minha_step_function" {\n    source                = "./modules/step_functions"\n    nome_da_step_function    = "autoremedia\xe7\xe3o"\n    sf_role_arn           = "arn:aws:iam::123456789012:role/autoremedia\xe7\xe3o"\n    nome_da_lambda  = "lambda_de_autoremedia\xe7\xe3o"\n\n    ssm_params = [                \n        {"InstanceId": "States.Array($.InstanceId)"},    \n        {"SecurityGroupIds": "States.Array($.SecurityGroupIds)"}\n    ]\n}\n')))}p.isMDXComponent=!0}}]);