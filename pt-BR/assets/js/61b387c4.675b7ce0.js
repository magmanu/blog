"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6891],{6217:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>t,metadata:()=>r,toc:()=>c});var s=a(4848),o=a(8453);const t={slug:"dynamic-json-in-terraform",title:"Como Gerar JSON Din\xe2mico no Terraform",authors:"manu",tags:["infra","terraform","IaC","step functions","devops"]},i=void 0,r={permalink:"/blog/pt-BR/tech/dynamic-json-in-terraform",source:"@site/i18n/pt-BR/docusaurus-plugin-content-blog-tech/2023-03-18-dynamic-json-in-terraform/index.md",title:"Como Gerar JSON Din\xe2mico no Terraform",description:"Quem programa n\xe3o se aguenta, n\xe9? N\xe3o pode ver uma coisinha declarativa que j\xe1 quer fazer um loop, colocar uma l\xf3gica, faz qualquer coisa menos... declara\xe7\xe3o.",date:"2023-03-18T00:00:00.000Z",tags:[{label:"infra",permalink:"/blog/pt-BR/tech/tags/infra"},{label:"terraform",permalink:"/blog/pt-BR/tech/tags/terraform"},{label:"IaC",permalink:"/blog/pt-BR/tech/tags/ia-c"},{label:"step functions",permalink:"/blog/pt-BR/tech/tags/step-functions"},{label:"devops",permalink:"/blog/pt-BR/tech/tags/devops"}],readingTime:8.91,hasTruncateMarker:!0,authors:[{name:"Manu Magalh\xe3es",title:"Engenheira de DevSecOps",url:"https://github.com/magmanu",imageURL:"https://github.com/magmanu.png",key:"manu"}],frontMatter:{slug:"dynamic-json-in-terraform",title:"Como Gerar JSON Din\xe2mico no Terraform",authors:"manu",tags:["infra","terraform","IaC","step functions","devops"]},unlisted:!1,prevItem:{title:"GitHub Actions: Fluxo e Persist\xeancia de Dados em Workflows",permalink:"/blog/pt-BR/tech/github-actions-data-flow"},nextItem:{title:"Solu\xe7\xe3o: Terraform n\xe3o deixa tern\xe1rios terem tipos diferentes",permalink:"/blog/pt-BR/tech/terraform-ternary-error"}},l={authorsImageUrls:[void 0]},c=[{value:"O que vamos fazer",id:"o-que-vamos-fazer",level:2},{value:"Caso 1: Injetando uma vari\xe1vel no JSON",id:"caso-1-injetando-uma-vari\xe1vel-no-json",level:2},{value:"Caso 2: Injetando uma lista no JSON",id:"caso-2-injetando-uma-lista-no-json",level:2},{value:"A solu\xe7\xe3o mais simples: lista expl\xedcita",id:"a-solu\xe7\xe3o-mais-simples-lista-expl\xedcita",level:3},{value:"A solu\xe7\xe3o com muita l\xf3gica: lista din\xe2mica",id:"a-solu\xe7\xe3o-com-muita-l\xf3gica-lista-din\xe2mica",level:3},{value:"Caso 3: Injetando um objeto no JSON",id:"caso-3-injetando-um-objeto-no-json",level:2},{value:"Arquivos Finais",id:"arquivos-finais",level:2}];function m(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Quem programa n\xe3o se aguenta, n\xe9? N\xe3o pode ver uma coisinha declarativa que j\xe1 quer fazer um loop, colocar uma l\xf3gica, faz qualquer coisa menos... declara\xe7\xe3o."}),"\n",(0,s.jsx)(n.p,{children:"Aqui vou mostrar como gerar um JSON din\xe2mico no Terraform. Neste artigo vou usar Step Functions como exemplo, mas voc\xea pode usar o JSON que quiser."}),"\n",(0,s.jsx)(n.h2,{id:"o-que-vamos-fazer",children:"O que vamos fazer"}),"\n",(0,s.jsx)(n.p,{children:"O JSON abaixo vai sofrer uma transforma\xe7\xe3o. Vamos substituir os valores est\xe1ticos por:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#caso-1-injetando-uma-vari%C3%A1vel-no-json",children:"Uma vari\xe1vel"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#caso-2-injetando-uma-lista-no-json",children:"Uma lista din\xe2mica"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#caso-3-injetando-um-objeto-no-json",children:"Um ou mais objetos din\xe2micos"})}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"(Adicionei coment\xe1rios n\xe3o idiom\xe1ticos dentro do c\xf3digo, mas \xe9 s\xf3 para deixar bem claro o que estamos fazendo.)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",metastring:"title='JSON de refer\xeancia'",children:'{\n    "Comment": "My state machine",\n    "StartAt": "Choice",\n    "States": {\n        "Handle Notification": {\n            "Type": "Task",\n            "Resource": "arn:aws:states:::lambda:invoke",\n            "OutputPath": "$.Payload",\n            "Parameters": {\n              "Payload.$": "$",\n              // highlight-start\n              ----\x3e Caso 1: Substituir a string expl\xedcita por uma string din\xe2mica\n              "FunctionName": "my_function_name"\n              // highlight-end\n            },\n            "End": true\n        },\n        "Choice": {\n          "Type": "Choice",\n           // highlight-start\n          ----\x3e Caso 2: Substituir por uma lista din\xe2mica\n          "Choices": [                          \n             {                                           \n               "IsPresent": true,                        \n               "Next": "SSM Execution-InstanceId",       \n               "Variable": "$.InstanceId"                \n              },                                         \n              {                                          \n               "IsPresent": true,                        \n               "Next": "SSM Execution-SecurityGroupIds", \n               "Variable": "$.SecurityGroupIds"          \n              }                                          \n            ],                                   \n            // highlight-end\n            "Default": "Pass"\n        },\n        // highlight-start\n        ----\x3e Caso 3: Substituir por um ou mais objetos din\xe2micos\n        "SSM Execution-InstanceId": {        \n            "Next": "Pass",                          \n            "Parameters": {                          \n                "DocumentName.$": "$.DocumentName",  \n                "Parameters": {                      \n                    "InstanceId.$": "States.Array($.InstanceId)"\n                }                                    \n              },                                     \n            "Resource": "arn:aws:states:::aws-sdk:ssm:startAutomationExecution",\n            "ResultPath": "$.TaskResult",            \n            "Type": "Task"                           \n        },                                           \n        "SSM Execution-SecurityGroupIds": {          \n            "Next": "Pass",                          \n            "Parameters": {                          \n                "DocumentName.$": "$.DocumentName",  \n                "Parameters": {                      \n                    "SecurityGroupIds.$": "States.Array($.SecurityGroupIds)"\n                }                                    \n            },                                       \n            "Resource": "arn:aws:states:::aws-sdk:ssm:startAutomationExecution",\n            "ResultPath": "$.TaskResult",            \n            "Type": "Task"                           \n        },                                   \n        // highlight-end\n        "Pass": {\n            "Type": "Pass",\n            "End": true\n        }\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Primeiro, salve o JSON acima em formato de template. Voc\xea pode usar a extens\xe3o ",(0,s.jsx)(n.code,{children:".tpl"})," ou ",(0,s.jsx)(n.code,{children:".tftpl"}),". Embora o Terraform recomende usar a segunda op\xe7\xe3o, n\xe3o existe uma regra r\xedgida sobre qual extens\xe3o usar."]}),"\n",(0,s.jsx)(n.h2,{id:"caso-1-injetando-uma-vari\xe1vel-no-json",children:"Caso 1: Injetando uma vari\xe1vel no JSON"}),"\n",(0,s.jsxs)(n.p,{children:["Vamos come\xe7ar atualizando o valor ",(0,s.jsx)(n.code,{children:"FunctionName"})," no template, usando interpola\xe7\xe3o:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",metastring:"title='modules/templates/stepfunction_definition.tftpl (parcial)'",children:'\n{"Handle Notification": {\n        "Type": "Task",\n        "Resource": "arn:aws:states:::lambda:invoke",\n        "OutputPath": "$.Payload",\n        "Parameters": {\n          "Payload.$": "$",\n          // highlight-next-line\n          "FunctionName": "${nome_da_lambda}"\n        },\n        "End": true\n      }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["O template precisa ser renderizado como um JSON v\xe1lido, ent\xe3o vamos usar a fun\xe7\xe3o ",(0,s.jsx)(n.code,{children:"templatefile"})," do Terraform. Pra isso, usamos dois argumentos: o caminho (path) do template e um mapa de vari\xe1veis a serem injetadas na runtime (execu\xe7\xe3o). Vou tentar manter o m\xf3dulo o mais din\xe2mico poss\xedvel, e vou incluir locals, vari\xe1veis e resources (recursos) do Terraform para mostrar como as coisas funcionam juntas."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-hcl",metastring:"title='modules/stepfunction.tf (full file)'",children:'\nlocals {\n    file = templatefile("${path.module}/templates/stepfunction_definition.tpl", {\n        nome_da_lambda = var.nome_da_lambda\n    })\n}\nvariable "nome_da_lambda" {\n    description = "Nome da lambda"\n    type        = string\n}\n\nresource "aws_sfn_state_machine" "sfn_state_machine" {\n    name        = var.nome_da_step_function\n    role_arn    = var.sf_role_arn\n    definition  = local.file\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Agora vamos salvar um ",(0,s.jsx)(n.code,{children:"main.tf"})," um n\xedvel acima, onde os valores expl\xedcitos (hardcoded) ser\xe3o definidos."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-hcl",metastring:"title='main.tf (full file)'",children:'\n# main.tf (arquivo completo)\n\nmodule "minha_step_function" {\n  source                = "./modules/step_functions"\n  nome_da_step_function    = "autoremedia\xe7\xe3o"\n  sf_role_arn           = "arn:aws:iam::123456789012:role/autoremedia\xe7\xe3o"\n  nome_da_lambda  = "lambda_de_autoremedia\xe7\xe3o"\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Se quiser conferir que a vari\xe1vel foi injetada com sucesso, execute ",(0,s.jsx)(n.code,{children:"terraform init && terraform plan"})," no terminal."]}),"\n",(0,s.jsx)(n.h2,{id:"caso-2-injetando-uma-lista-no-json",children:"Caso 2: Injetando uma lista no JSON"}),"\n",(0,s.jsx)(n.p,{children:"S\xf3 pra lembrar, esta \xe9 a lista que estamos refatorando:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",metastring:"title='modules/templates/stepfunction_definition.tftpl (parcial)'",children:'\n"Choice": {\n    "Type": "Choice",\n    // highlight-start\n    "Choices": [                            \n        {                                           \n          "IsPresent": true,                        \n          "Next": "SSM Execution-InstanceId",       \n          "Variable": "$.InstanceId"                \n        },                                          \n        {                                           \n          "IsPresent": true,                        \n          "Next": "SSM Execution-SecurityGroupIds", \n          "Variable": "$.SecurityGroupIds"          \n        }                                           \n    ],                                      \n    // highlight-end\n    "Default": "Pass"\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Vamos refatorar o template de novo. Vamos usar uma fun\xe7\xe3o do Terraform chamada ",(0,s.jsx)(n.code,{children:"jsonencode"}),", que faz a lista de objetos usada no template ser renderizada como JSON:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",metastring:"title='modules/templates/stepfunction_definition.tftpl (parcial)'",children:'\n"Choice": {\n    "Type": "Choice",\n    // highlight-next-line\n    "Choices": ${jsonencode(lista_de_op\xe7\xf5es)},\n    "Default": "Pass"\n    }\n'})}),"\n",(0,s.jsx)(n.p,{children:"Agora, vamos ver duas maneiras de passar a lista para o template."}),"\n",(0,s.jsx)(n.h3,{id:"a-solu\xe7\xe3o-mais-simples-lista-expl\xedcita",children:"A solu\xe7\xe3o mais simples: lista expl\xedcita"}),"\n",(0,s.jsx)(n.p,{children:"Uma op\xe7\xe3o \xe9 criar uma vari\xe1vel que vai passar uma lista pronta:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-hcl",metastring:"title='modules/stepfunction.tf (pacial)'",children:'\nlocals {\n    file = templatefile("${path.module}/templates/stepfunction_definition.tpl", {\n        nome_da_lambda = var.nome_da_lambda\n        // highlight-next-line\n        lista_de_op\xe7\xf5es = var.minha_lista\n    })\n}\n// highlight-start\nvariable "minha_lista" {\n    description = "A lista que voc\xea quiser"\n    type = list\n// highlight-end\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Agora, no m\xf3dulo ",(0,s.jsx)(n.code,{children:"main.tf"}),", passe os valores das vari\xe1veis. O JSON ficou \xe9 din\xe2mico, mas a lista \xe9 ainda \xe9 meio \u201cest\xe1tica\u201d porque foi definida explicitamente no m\xf3dulo principal. E v\xe1rias vezes, isso basta."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-hcl",metastring:"title='main.tf (full file)'",children:'\nmodule "minha_step_function" {\n    source                = "./modules/step_functions"\n    nome_da_step_function    = "autoremedia\xe7\xe3o"\n    sf_role_arn           = "arn:aws:iam::123456789012:role/autoremedia\xe7\xe3o"\n    nome_da_lambda  = "lambda_de_autoremedia\xe7\xe3o"\n\n    // highlight-start\n    minha_lista = [{\n        "IsPresent": true,\n        "Next": "SSM Execution-InstanceId",\n        "Variable": "$.InstanceId"\n    }]\n    // highlight-end\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"a-solu\xe7\xe3o-com-muita-l\xf3gica-lista-din\xe2mica",children:"A solu\xe7\xe3o com muita l\xf3gica: lista din\xe2mica"}),"\n",(0,s.jsxs)(n.p,{children:["Mas e se voc\xea quiser que a lista em si tamb\xe9m seja din\xe2mica? Por exemplo, voc\xea quer gerar a lista extraindo os valores de um par\xe2metro, e depois enviar a lista para o json?\nEm nosso exemplo, vamos gerar as listas de ",(0,s.jsx)(n.code,{children:"Next"})," e ",(0,s.jsx)(n.code,{children:"Variable"})," extraindo as chaves (keys) que est\xe3o em ",(0,s.jsx)(n.code,{children:"ssm_params"}),", no arquivo principal ",(0,s.jsx)(n.code,{children:"main.tf"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-hcl",metastring:"title='main.tf (extract)'",children:'\nmodule "minha_step_function" {\n    source                = "./modules/step_functions"\n    nome_da_step_function    = "autoremedia\xe7\xe3o"\n    sf_role_arn           = "arn:aws:iam::123456789012:role/autoremedia\xe7\xe3o"\n    nome_da_lambda  = "lambda_de_autoremedia\xe7\xe3o"\n\n    // highlight-start\n    # Tiramos a lista est\xe1tica que estava aqui\n    ssm_params = [\n        {"InstanceId": "States.Array($.InstanceId)"},    \n        {"SecurityGroupIds": "States.Array($.SecurityGroupIds)"}\n    ]\n    // highlight-end\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Nosso m\xf3dulo vai ficar assim:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-hcl",metastring:"title='modules/stepfunction.tf (full file)'",children:'\nlocals {\n    lista_de_op\xe7\xf5es = flatten([for item in var.ssm_params: [\n        for chave, valor in item : {\n            "IsPresent": true,\n            "Next": "SSM Execution-${chave}"\n            "Variable": "$.${chave}",\n        }]\n    ])\n    file = templatefile("${path.module}/templates/stepfunction_definition.tpl", {\n        nome_da_lambda = var.nome_da_lambda,\n        lista_de_op\xe7\xf5es = local.lista_de_op\xe7\xf5es\n    })\n}\n\nvariable "nome_da_lambda" {\n    description = "Nome da lambda"\n    type        = string\n}\n\nvariable "ssm_params" {\n    description = "Lista dos par\xe2metros de SSM a serem injetados"\n    type = list\n}\n\nresource "aws_sfn_state_machine" "sfn_state_machine" {\n    name        = var.nome_da_step_function\n    role_arn    = aws_iam_role.step_function_role_arn\n    definition  = local.file\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Come\xe7ando com a linha ",(0,s.jsx)(n.code,{children:"lista_de_op\xe7\xf5es = flatten([for item in var.ssm_params:"})," ignore ",(0,s.jsx)(n.code,{children:"flatten"})," por um momento e observe o loop."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"ssm_params"})," \xe9 uma lista, e vamos ver cada item. O loop est\xe1 entre colchetes, o que significa que o resultado ser\xe1 uma lista. O ",(0,s.jsx)(n.code,{children:":"})," que se segue \xe9 apenas parte da sintaxe do loop."]}),"\n",(0,s.jsxs)(n.p,{children:["Na linha a seguir, temos outro loop: ",(0,s.jsx)(n.code,{children:"for chave, valor in item : {"})," . Este loop passa em cada objeto do ",(0,s.jsx)(n.code,{children:"ssm_params"}),", acessando a chave e o valor. Assim, podemos extrair e reestruturar os dados. O loop tamb\xe9m \xe9 colocado entre colchetes, o que significa que, infelizmente, cada objeto estar\xe1 dentro de uma lista pr\xf3pria. O resultado final vai ficar assim: ",(0,s.jsx)(n.code,{children:"[[obj1],[obj2]]"})]}),"\n",(0,s.jsxs)(n.p,{children:["Agora, lembra do ",(0,s.jsx)(n.code,{children:"flatten"}),"? Essa fun\xe7\xe3o do Terraform \xe9 necess\xe1ria porque precisamos achatar (flatten) esse resultado que est\xe1 cheio de aninhamento (nesting) desnecess\xe1rio. O flatten faz nosso resultado ficar assim: ",(0,s.jsx)(n.code,{children:"[obj1, obj2]"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Pronto."}),"\n",(0,s.jsx)(n.h2,{id:"caso-3-injetando-um-objeto-no-json",children:"Caso 3: Injetando um objeto no JSON"}),"\n",(0,s.jsx)(n.p,{children:"Agora, a parte mais emocionante. Vamos abstrair objetos inteiros. (Neste caso, significa que etapas inteiras das Step Functions podem ficar din\xe2micas!)\nT\xe1 vendo isso tudo a\xed embaixo? Vai tudo embora!"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'"Steps": {\n    // highlight-start\n    "SSM Execution-InstanceId": {           \n            "Next": "Pass",                          \n            "Parameters": {                          \n                "DocumentName.$": "$.DocumentName",  \n                "Parameters": {                      \n                    "InstanceId.$": "States.Array($.InstanceId)"\n                }                                    \n              },                                     \n            "Resource": "arn:aws:states:::aws-sdk:ssm:startAutomationExecution",\n            "ResultPath": "$.TaskResult",            \n            "Type": "Task"                           \n        },                                           \n        "SSM Execution-SecurityGroupIds": {          \n            "Next": "Pass",                          \n            "Parameters": {                          \n                "DocumentName.$": "$.DocumentName",  \n                "Parameters": {                      \n                    "SecurityGroupIds.$": "States.Array($.SecurityGroupIds)"\n                }                                    \n            },                                       \n            "Resource": "arn:aws:states:::aws-sdk:ssm:startAutomationExecution",\n            "ResultPath": "$.TaskResult",            \n            "Type": "Task"                           \n        }                                   \n        // highlight-end\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Pra variar, vamos modificar o template:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-hcl",metastring:"title='modules/templates/stepfunction_definition.tftpl (parcial)'",children:'\n"States": {\n    "Choice": {\n      "Type": "Choice",\n      "Choices": ${jsonencode(choices)},\n      "Default": "Pass"\n    },\n    / highlight-start\n    %{ for chave, data in ssm_execution }   \n        "${chave}": ${jsonencode(data)},\n    %{ endfor }\n    "Handle Notification": {<--- bl\xe1bl\xe1--\x3e}\n    }\n    // highlight-end\n'})}),"\n",(0,s.jsx)(n.p,{children:"Se seu linter reclamar, mantenha a f\xe9 que t\xe1 tudo certo."}),"\n",(0,s.jsxs)(n.p,{children:["Mas o que est\xe1 acontecendo? Estamos usando a sintaxe ",(0,s.jsx)(n.a,{href:"https://developer.hashicorp.com/terraform/language/expressions/strings#directives",children:"diretiva do Terraform"})," ",(0,s.jsx)(n.code,{children:"%{}"})," para escrever uma string din\xe2mica (pois \xe9, templates s\xe3o tratados como strings) ."]}),"\n",(0,s.jsxs)(n.p,{children:["A linha ",(0,s.jsx)(n.code,{children:"%{ for chave, data in ssm_execution }"})," informa \xe0 fun\xe7\xe3o ",(0,s.jsx)(n.code,{children:"templatefile"})," que uma itera\xe7\xe3o vai come\xe7ar, e que cs\xf3 termina quando chegar na linha ",(0,s.jsx)(n.code,{children:"%{ endfor }"}),". Enquanto isso, a fun\xe7\xe3o vai ontinuar criando pares de chave-valor com o formato ",(0,s.jsx)(n.code,{children:'"minha_chave": {"meu": "json"},'}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Legal, n\xe9?"}),"\n",(0,s.jsxs)(n.p,{children:["Ent\xe3o agora vamos adicionar o valor local ",(0,s.jsx)(n.code,{children:"ssm_execution"}),", a l\xf3gica que ir\xe1 preencher tudo isso."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-hcl",metastring:"title='modules/stepfunction.tf (parcial)'",children:'\nlocals {\n    choices = flatten([for item in var.ssm_params: [\n        for chave, valor in item : {\n            "IsPresent": true,\n            "Next": "SSM Execution-${chave}"\n            "Variable": "$.${chave}",\n        }]\n    ])\n\n    // highlight-start\n    ssm_execution = merge(flatten([for item in var.ssm_params: [ \n                    for chave, valor in item : {\n                        "SSM Execution-${chave}": {\n                            "Type": "Task",\n                            "Parameters": {\n                              "DocumentName.$": "$.DocumentName",\n                              "Parameters": {"$.${chave}": "${valor}"}\n                            },\n                            "Resource": "arn:aws:states:::aws-sdk:ssm:startAutomationExecution",\n                            "Next": "Handle Notification",\n                            "ResultPath": "$.TaskResult"\n                        }\n                    }\n                    ]]\n                )...)\n    // highlight-end\n\n    file = templatefile("${path.module}/templates/stepfunction_definition.tpl", {\n        nome_da_lambda = var.nome_da_lambda,\n        lista_de_op\xe7\xf5es = local.choices,\n        // highlight-next-line\n        ssm_execution = local.ssm_execution\n    })\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["J\xe1 estamos familiarizados com loops e flatten, ent\xe3o vamos falar sobre as novidades: ",(0,s.jsx)(n.code,{children:"merge"})," e ",(0,s.jsx)(n.code,{children:"..."}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"merge"})," \xe9 uma fun\xe7\xe3o do Terraform que junta v\xe1rios objetos em um s\xf3. Ent\xe3o, se tivermos dois objetos assim:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'   {\n     "a": 1,\n     "b": 2\n   },\n   {\n     "c": 3,\n     "d": 4\n   }\n'})}),"\n",(0,s.jsxs)(n.p,{children:["a fun\xe7\xe3o ",(0,s.jsx)(n.code,{children:"merge"})," vai transform\xe1-los em:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n     "a": 1,\n     "b": 2,\n     "c": 3,\n     "d": 4\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["E se voc\xea estava prestando aten\xe7\xe3o, notou que a fun\xe7\xe3o merge em nosso m\xf3dulo ",(0,s.jsx)(n.strong,{children:"n\xe3o"})," est\xe1 usando objetos como argumento, ela est\xe1 usando a fun\xe7\xe3o flatten (que gera uma \xfanica lista). O truque est\xe1 aqui: ",(0,s.jsx)(n.code,{children:"..."}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["No Terraform, ",(0,s.jsx)(n.code,{children:"..."})," (tr\xeas pontos) funciona como o operador spread em Javascript: ele expande a lista em argumentos separados, individuais."]}),"\n",(0,s.jsx)(n.p,{children:"Ent\xe3o \xe9 isso. Nosso template final ficou literalmente com metade do tamanho do JSON original. Ele \xe9 din\xe2mico, reutiliz\xe1vel e o melhor de tudo \u2013 voc\xea nunca mais vai precisar o Amazon States Language no seu projeto. Vale cada minuto investido."}),"\n",(0,s.jsx)(n.h2,{id:"arquivos-finais",children:"Arquivos Finais"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-hcl",metastring:"title='modules/templates/stepfunction_definition.tpl'",children:'\n{\n    "Comment": "My state machine",\n    "StartAt": "Choice",\n    "States": {\n        "Handle Notification": {\n            "Type": "Task",\n            "Resource": "arn:aws:states:::lambda:invoke",\n            "OutputPath": "$.Payload",\n            "Parameters": {\n              "Payload.$": "$",\n              "FunctionName": "${nome_da_lambda}"\n            },\n            "End": true\n        },\n        "Choice": {\n            "Type": "Choice",\n            "Choices": ${jsonencode(choices)},\n            "Default": "Pass"\n        },\n        %{ for chave, data in ssm_execution }\n        "${chave}": ${jsonencode(data)},\n        %{ endfor }\n        "Pass": {\n            "Type": "Pass",\n            "End": true\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-hcl",metastring:"title='modules/stepfunction.tf'",children:'locals {\n    choices = flatten([for item in var.ssm_params: [\n        for chave, valor in item : {\n            "IsPresent": true,\n            "Next": "SSM Execution-${chave}"\n            "Variable": "$.${chave}",\n        }]\n    ])\n\n    ssm_execution = merge(flatten([for item in var.ssm_params: [ \n                    for chave, valor in item : {\n                        "SSM Execution-${chave}": {\n                            "Type": "Task",\n                            "Parameters": {\n                              "DocumentName.$": "$.DocumentName",\n                              "Parameters": {"$.${chave}": "${valor}"}\n                            },\n                            "Resource": "arn:aws:states:::aws-sdk:ssm:startAutomationExecution",\n                            "Next": "Handle Notification",\n                            "ResultPath": "$.TaskResult"\n                        }\n                    }\n                    ]]\n                )...)\n\n    file = templatefile("${path.module}/templates/stepfunction_definition.tpl", {\n        nome_da_lambda = var.nome_da_lambda,\n        lista_de_op\xe7\xf5es = local.choices,\n        ssm_execution = local.ssm_execution\n    })\n}\n\nvariable "nome_da_lambda" {\n    description = "Nome da lambda"\n    type        = string\n}\n\nvariable "ssm_params" {\n    description = "Lista dos par\xe2metros de SSM a serem injetados"\n    type = list\n}\n\nresource "aws_sfn_state_machine" "sfn_state_machine" {\n    name        = var.nome_da_step_function\n    role_arn    = var.sf_role_arn\n    definition  = local.file\n}\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-hcl",metastring:"title='main.tf'",children:'# main.tf (arquivo completo)\n\nmodule "minha_step_function" {\n    source                = "./modules/step_functions"\n    nome_da_step_function    = "autoremedia\xe7\xe3o"\n    sf_role_arn           = "arn:aws:iam::123456789012:role/autoremedia\xe7\xe3o"\n    nome_da_lambda  = "lambda_de_autoremedia\xe7\xe3o"\n\n    ssm_params = [                \n        {"InstanceId": "States.Array($.InstanceId)"},    \n        {"SecurityGroupIds": "States.Array($.SecurityGroupIds)"}\n    ]\n}\n'})})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(m,{...e})}):m(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>r});var s=a(6540);const o={},t=s.createContext(o);function i(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);